ClassOrInterfaceDeclaration
	FieldDeclaration
		VariableDeclarator
			getLog
				ClassExpr
				LogFactory
			log
	FieldDeclaration
		VariableDeclarator
			getManager
				StringLiteralExpr
				StringManager
			sm
	FieldDeclaration
		VariableDeclarator
			BooleanLiteralExpr
			logfull
			PrimitiveType
	FieldDeclaration
		VariableDeclarator
			MAX_THREADS
			PrimitiveType
	FieldDeclaration
		VariableDeclarator
			MAX_THREADS_MIN
			PrimitiveType
	FieldDeclaration
		VariableDeclarator
			MAX_SPARE_THREADS
			PrimitiveType
	FieldDeclaration
		VariableDeclarator
			MIN_SPARE_THREADS
			PrimitiveType
	FieldDeclaration
		VariableDeclarator
			*
			WORK_WAIT_TIMEOUT
			PrimitiveType
	FieldDeclaration
		VariableDeclarator
			NullLiteralExpr
			pool
	FieldDeclaration
		VariableDeclarator
			monitor
	FieldDeclaration
		VariableDeclarator
			maxThreads
			PrimitiveType
	FieldDeclaration
		VariableDeclarator
			minSpareThreads
			PrimitiveType
	FieldDeclaration
		VariableDeclarator
			maxSpareThreads
			PrimitiveType
	FieldDeclaration
		VariableDeclarator
			currentThreadCount
			PrimitiveType
	FieldDeclaration
		VariableDeclarator
			currentThreadsBusy
			PrimitiveType
	FieldDeclaration
		VariableDeclarator
			stopThePool
			PrimitiveType
	FieldDeclaration
		VariableDeclarator
			BooleanLiteralExpr
			isDaemon
			PrimitiveType
	FieldDeclaration
		VariableDeclarator
			threads
	FieldDeclaration
		VariableDeclarator
			listeners
	FieldDeclaration
		VariableDeclarator
			StringLiteralExpr
			name
	FieldDeclaration
		VariableDeclarator
			sequence
			PrimitiveType
	FieldDeclaration
		VariableDeclarator
			Thread
			threadPriority
			PrimitiveType
	ConstructorDeclaration
		BlockStmt
			maxThreads
			MAX_THREADS
			maxSpareThreads
			MAX_SPARE_THREADS
			minSpareThreads
			MIN_SPARE_THREADS
			currentThreadCount
			currentThreadsBusy
			stopThePool
			BooleanLiteralExpr
	MethodDeclaration
		BlockStmt
			ReturnStmt
		PrimitiveType
	MethodDeclaration
		BlockStmt
			stopThePool
			BooleanLiteralExpr
			currentThreadCount
			currentThreadsBusy
			adjustLimits
			pool
			maxThreads
			openThreads
				minSpareThreads
			IfStmt
				<
					maxSpareThreads
					maxThreads
				BlockStmt
					monitor
	MethodDeclaration
		BlockStmt
			ReturnStmt
				monitor
	MethodDeclaration
		BlockStmt
			IfStmt
				isDebugEnabled
					log
				debug
					+
						+
							+
								getName
									getClass
								StringLiteralExpr
							threadPriority
						StringLiteralExpr
					log
			IfStmt
				<
					threadPriority
					Thread
				IfStmt
					>
						threadPriority
						Thread
					BlockStmt
						ThrowStmt
							StringLiteralExpr
				BlockStmt
					ThrowStmt
						StringLiteralExpr
			threadPriority
			VariableDeclarator
				getThreads
				currentThreads
			VariableDeclarator
				NullLiteralExpr
				t
			WhileStmt
				BlockStmt
					t
					nextElement
						currentThreads
					setPriority
						threadPriority
						t
				hasMoreElements
					currentThreads
		PrimitiveType
	MethodDeclaration
		BlockStmt
			ReturnStmt
				threadPriority
		PrimitiveType
	MethodDeclaration
		BlockStmt
			maxThreads
		PrimitiveType
	MethodDeclaration
		BlockStmt
			ReturnStmt
				maxThreads
		PrimitiveType
	MethodDeclaration
		BlockStmt
			minSpareThreads
		PrimitiveType
	MethodDeclaration
		BlockStmt
			ReturnStmt
				minSpareThreads
		PrimitiveType
	MethodDeclaration
		BlockStmt
			maxSpareThreads
		PrimitiveType
	MethodDeclaration
		BlockStmt
			ReturnStmt
				maxSpareThreads
		PrimitiveType
	MethodDeclaration
		BlockStmt
			ReturnStmt
				currentThreadCount
		PrimitiveType
	MethodDeclaration
		BlockStmt
			ReturnStmt
				currentThreadsBusy
		PrimitiveType
	MethodDeclaration
		BlockStmt
			ReturnStmt
				isDaemon
		PrimitiveType
	MethodDeclaration
		BlockStmt
			ReturnStmt
		PrimitiveType
	MethodDeclaration
		BlockStmt
			isDaemon
			b
		PrimitiveType
	MethodDeclaration
		BlockStmt
			ReturnStmt
				isDaemon
		PrimitiveType
	MethodDeclaration
		BlockStmt
			name
	MethodDeclaration
		BlockStmt
			ReturnStmt
				name
	MethodDeclaration
		BlockStmt
			ReturnStmt
				sequence
		PrimitiveType
	MethodDeclaration
		BlockStmt
			ReturnStmt
				++
					sequence
		PrimitiveType
	MethodDeclaration
		BlockStmt
			put
				t
				cr
				threads
			ForStmt
				BlockStmt
					VariableDeclarator
						elementAt
							i
							listeners
						tpl
					threadStart
						t
						tpl
				<
					i
					size
						listeners
				VariableDeclarator
					i
					PrimitiveType
				++
					i
	MethodDeclaration
		BlockStmt
			remove
				t
				threads
			ForStmt
				BlockStmt
					VariableDeclarator
						elementAt
							i
							listeners
						tpl
					threadEnd
						t
						tpl
				<
					i
					size
						listeners
				VariableDeclarator
					i
					PrimitiveType
				++
					i
	MethodDeclaration
		BlockStmt
			addElement
				tpl
				listeners
	MethodDeclaration
		BlockStmt
			ReturnStmt
				keys
					threads
	MethodDeclaration
		BlockStmt
			VariableDeclarator
				findControlRunnable
				c
			runIt
				r
				c
	MethodDeclaration
		BlockStmt
			IfStmt
				==
					NullLiteralExpr
					r
				BlockStmt
					ThrowStmt
			VariableDeclarator
				findControlRunnable
				c
			runIt
				r
				c
	MethodDeclaration
		BlockStmt
			VariableDeclarator
				NullLiteralExpr
				c
			IfStmt
				stopThePool
				BlockStmt
					ThrowStmt
			SynchronizedStmt
				BlockStmt
					WhileStmt
						BlockStmt
							IfStmt
								<
									currentThreadCount
									maxThreads
								BlockStmt
									logFull
										log
										currentThreadCount
										maxThreads
									TryStmt
										CatchClause
											BlockStmt
												error
													StringLiteralExpr
													e
													log
										BlockStmt
											wait
									IfStmt
										isDebugEnabled
											log
										BlockStmt
											debug
												+
													+
														+
															StringLiteralExpr
															currentThreadCount
														StringLiteralExpr
													currentThreadsBusy
												log
									IfStmt
										stopThePool
										BlockStmt
											BreakStmt
								BlockStmt
									VariableDeclarator
										+
											currentThreadCount
											minSpareThreads
										toOpen
										PrimitiveType
									openThreads
										toOpen
						==
							currentThreadsBusy
							currentThreadCount
					IfStmt
						||
							==
								currentThreadCount
							stopThePool
						BlockStmt
							ThrowStmt
					VariableDeclarator
						-
							-
								currentThreadCount
								currentThreadsBusy
						pos
						PrimitiveType
					c
					pos
					pool
					pos
					pool
					NullLiteralExpr
					++
						currentThreadsBusy
			ReturnStmt
				c
	MethodDeclaration
		BlockStmt
			IfStmt
				logfull
				IfStmt
					isDebugEnabled
						log
					BlockStmt
						debug
							+
								+
									+
										StringLiteralExpr
										currentThreadCount
									StringLiteralExpr
								maxThreads
							log
				BlockStmt
					error
						getString
							StringLiteralExpr
							currentThreadCount
							maxThreads
							sm
						log
					logfull
					BooleanLiteralExpr
		PrimitiveType
		PrimitiveType
	MethodDeclaration
		BlockStmt
			IfStmt
				!
					stopThePool
				BlockStmt
					stopThePool
					BooleanLiteralExpr
					IfStmt
						!=
							monitor
							NullLiteralExpr
						BlockStmt
							terminate
								monitor
							monitor
							NullLiteralExpr
					ForStmt
						BlockStmt
							TryStmt
								CatchClause
									BlockStmt
										error
											StringLiteralExpr
											t
											log
								BlockStmt
									terminate
										i
										pool
						<
							i
							-
								currentThreadCount
								currentThreadsBusy
						VariableDeclarator
							i
							PrimitiveType
						++
							i
					currentThreadsBusy
					currentThreadCount
					pool
					NullLiteralExpr
					notifyAll
	MethodDeclaration
		BlockStmt
			IfStmt
				stopThePool
				BlockStmt
					ReturnStmt
			IfStmt
				>
					-
						currentThreadCount
						currentThreadsBusy
					maxSpareThreads
				BlockStmt
					VariableDeclarator
						-
							-
								currentThreadCount
								currentThreadsBusy
							maxSpareThreads
						toFree
						PrimitiveType
					ForStmt
						BlockStmt
							VariableDeclarator
								-
									-
										currentThreadCount
										currentThreadsBusy
								pool
								c
							terminate
								c
							-
								-
									currentThreadCount
									currentThreadsBusy
							pool
							NullLiteralExpr
							--
								currentThreadCount
						<
							i
							toFree
						VariableDeclarator
							i
							PrimitiveType
						++
							i
	MethodDeclaration
		BlockStmt
			IfStmt
				||
					==
						currentThreadCount
					stopThePool
				BlockStmt
					terminate
						c
					ReturnStmt
			--
				currentThreadsBusy
			-
				-
					currentThreadCount
					currentThreadsBusy
			pool
			c
			notify
	MethodDeclaration
		BlockStmt
			--
				currentThreadsBusy
			--
				currentThreadCount
			notify
	MethodDeclaration
		BlockStmt
			IfStmt
				<=
					maxThreads
				IfStmt
					<
						maxThreads
						MAX_THREADS_MIN
					BlockStmt
						warn
							getString
								StringLiteralExpr
								maxThreads
								MAX_THREADS_MIN
								sm
							log
						maxThreads
						MAX_THREADS_MIN
				BlockStmt
					maxThreads
					MAX_THREADS
			IfStmt
				>=
					maxSpareThreads
					maxThreads
				BlockStmt
					maxSpareThreads
					maxThreads
			IfStmt
				<=
					maxSpareThreads
				BlockStmt
					IfStmt
						==
							maxThreads
						BlockStmt
							maxSpareThreads
							/
								maxThreads
						BlockStmt
							maxSpareThreads
			IfStmt
				>
					minSpareThreads
					maxSpareThreads
				BlockStmt
					minSpareThreads
					maxSpareThreads
			IfStmt
				<=
					minSpareThreads
				BlockStmt
					IfStmt
						==
							maxSpareThreads
						BlockStmt
							minSpareThreads
							/
								maxSpareThreads
						BlockStmt
							minSpareThreads
	MethodDeclaration
		BlockStmt
			IfStmt
				>
					toOpen
					maxThreads
				BlockStmt
					toOpen
					maxThreads
			ForStmt
				BlockStmt
					-
						i
						currentThreadsBusy
					pool
				<
					i
					toOpen
				VariableDeclarator
					currentThreadCount
					i
					PrimitiveType
				++
					i
			currentThreadCount
			toOpen
		PrimitiveType
	MethodDeclaration
		BlockStmt
			info
				s
				log
	ClassOrInterfaceDeclaration
		FieldDeclaration
			VariableDeclarator
				p
		FieldDeclaration
			VariableDeclarator
				t
		FieldDeclaration
			VariableDeclarator
				WORK_WAIT_TIMEOUT
				interval
				PrimitiveType
		FieldDeclaration
			VariableDeclarator
				shouldTerminate
				PrimitiveType
		ConstructorDeclaration
			BlockStmt
				p
				start
		MethodDeclaration
			BlockStmt
				shouldTerminate
				BooleanLiteralExpr
				t
				setDaemon
					getDaemon
						p
					t
				setName
					+
						getName
							p
						StringLiteralExpr
					t
				start
					t
		MethodDeclaration
			BlockStmt
				i
			PrimitiveType
		MethodDeclaration
			BlockStmt
				WhileStmt
					BlockStmt
						TryStmt
							CatchClause
								BlockStmt
									error
										StringLiteralExpr
										t
										ThreadPool
							BlockStmt
								SynchronizedStmt
									BlockStmt
										wait
											interval
								IfStmt
									shouldTerminate
									BlockStmt
										BreakStmt
								checkSpareControllers
									p
					BooleanLiteralExpr
		MethodDeclaration
			BlockStmt
				terminate
		MethodDeclaration
			BlockStmt
				shouldTerminate
				BooleanLiteralExpr
				notify
	ClassOrInterfaceDeclaration
		FieldDeclaration
			VariableDeclarator
				p
		FieldDeclaration
			VariableDeclarator
				t
		FieldDeclaration
			VariableDeclarator
				toRun
		FieldDeclaration
			VariableDeclarator
				toRunRunnable
		FieldDeclaration
			VariableDeclarator
				shouldTerminate
				PrimitiveType
		FieldDeclaration
			VariableDeclarator
				shouldRun
				PrimitiveType
		FieldDeclaration
			VariableDeclarator
				noThData
				PrimitiveType
		ConstructorDeclaration
			BlockStmt
				toRun
				NullLiteralExpr
				shouldTerminate
				BooleanLiteralExpr
				shouldRun
				BooleanLiteralExpr
				p
				t
				p
				setDaemon
					BooleanLiteralExpr
					t
				setName
					+
						+
							getName
								p
							StringLiteralExpr
						incSequence
							p
					t
				setPriority
					getThreadPriority
						p
					t
				addThread
					t
					p
				noThData
				BooleanLiteralExpr
				start
					t
		MethodDeclaration
			BlockStmt
				VariableDeclarator
					BooleanLiteralExpr
					_shouldRun
					PrimitiveType
				VariableDeclarator
					BooleanLiteralExpr
					_shouldTerminate
					PrimitiveType
				VariableDeclarator
					NullLiteralExpr
					_toRun
				TryStmt
					BlockStmt
						removeThread
							currentThread
								Thread
							p
					BlockStmt
						WhileStmt
							BlockStmt
								TryStmt
									CatchClause
										BlockStmt
											error
												StringLiteralExpr
												ie
												ThreadPool
									BlockStmt
										SynchronizedStmt
											BlockStmt
												WhileStmt
													BlockStmt
														wait
													&&
														!
															shouldRun
														!
															shouldTerminate
												_shouldRun
												shouldRun
												_shouldTerminate
												shouldTerminate
												_toRun
												toRun
										IfStmt
											_shouldTerminate
											BlockStmt
												IfStmt
													isDebugEnabled
														ThreadPool
													debug
														StringLiteralExpr
														ThreadPool
												BreakStmt
										TryStmt
											CatchClause
												BlockStmt
													error
														getString
															StringLiteralExpr
															t
															toString
																toRun
															sm
														ThreadPool
													_shouldTerminate
													BooleanLiteralExpr
													_shouldRun
													BooleanLiteralExpr
													notifyThreadEnd
														p
											BlockStmt
												IfStmt
													_shouldRun
													BlockStmt
														shouldRun
														BooleanLiteralExpr
														returnController
															p
											BlockStmt
												IfStmt
													noThData
													BlockStmt
														IfStmt
															!=
																_toRun
																NullLiteralExpr
															BlockStmt
																VariableDeclarator
																	getInitData
																		_toRun
																	thData
																setThreadData
																	p
																	thData
																	t
																IfStmt
																	isDebugEnabled
																		ThreadPool
																	debug
																		StringLiteralExpr
																		ThreadPool
														noThData
														BooleanLiteralExpr
												IfStmt
													_shouldRun
													BlockStmt
														IfStmt
															!=
																_toRun
																NullLiteralExpr
															IfStmt
																!=
																	toRunRunnable
																	NullLiteralExpr
																BlockStmt
																	IfStmt
																		isDebugEnabled
																			ThreadPool
																		debug
																			StringLiteralExpr
																			ThreadPool
																BlockStmt
																	run
																		toRunRunnable
															BlockStmt
																runIt
																	getThreadData
																		p
																		t
																	_toRun
										IfStmt
											_shouldTerminate
											BlockStmt
												BreakStmt
							BooleanLiteralExpr
		MethodDeclaration
			BlockStmt
				toRun
				shouldRun
				BooleanLiteralExpr
				notify
		MethodDeclaration
			BlockStmt
				toRun
				shouldRun
				BooleanLiteralExpr
				notify
		MethodDeclaration
			BlockStmt
				terminate
		MethodDeclaration
			BlockStmt
				stop
					t
		MethodDeclaration
			BlockStmt
				shouldTerminate
				BooleanLiteralExpr
				notify
	MethodDeclaration
		BlockStmt
			VariableDeclarator
				sb
			VariableDeclarator
				iterator
					keySet
						threads
				it
			append
				StringLiteralExpr
				sb
			WhileStmt
				BlockStmt
					append
						StringLiteralExpr
						sb
					VariableDeclarator
						next
							it
						twa
					append
						StringLiteralExpr
						append
							getCurrentStage
								twa
							sb
					append
						getParam
							twa
						sb
					append
						StringLiteralExpr
						sb
				hasNext
					it
			append
				StringLiteralExpr
				sb
			ReturnStmt
				toString
					sb
	MethodDeclaration
		BlockStmt
			VariableDeclarator
				size
					threads
				status
			VariableDeclarator
				iterator
					keySet
						threads
				it
			ForStmt
				BlockStmt
					VariableDeclarator
						next
							it
						twa
					i
					status
					getCurrentStage
						twa
				&&
					<
						i
						status
					hasNext
						it
				VariableDeclarator
					i
					PrimitiveType
				++
					i
			ReturnStmt
				status
	MethodDeclaration
		BlockStmt
			VariableDeclarator
				size
					threads
				status
			VariableDeclarator
				iterator
					keySet
						threads
				it
			ForStmt
				BlockStmt
					VariableDeclarator
						next
							it
						twa
					VariableDeclarator
						getParam
							twa
						o
					i
					status
					==
						o
						NullLiteralExpr
					toString
						o
					NullLiteralExpr
				&&
					<
						i
						status
					hasNext
						it
				VariableDeclarator
					i
					PrimitiveType
				++
					i
			ReturnStmt
				status
	ClassOrInterfaceDeclaration
		MethodDeclaration
		MethodDeclaration
