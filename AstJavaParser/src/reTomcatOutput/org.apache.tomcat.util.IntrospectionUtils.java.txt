ClassOrInterfaceDeclaration
	FieldDeclaration
		VariableDeclarator
			getLog
				ClassExpr
				org
			log
	MethodDeclaration
		BlockStmt
			VariableDeclarator
				NullLiteralExpr
				executeM
			VariableDeclarator
				getClass
					proxy
				c
			VariableDeclarator
				params
			executeM
			findMethod
				c
				method
				params
			IfStmt
				==
					executeM
					NullLiteralExpr
				BlockStmt
					ThrowStmt
						+
							StringLiteralExpr
							getClass
								proxy
			invoke
				proxy
				NullLiteralExpr
				executeM
	MethodDeclaration
		BlockStmt
			IfStmt
				proxy
				BlockStmt
					setAttribute
						n
						v
						proxy
					ReturnStmt
			VariableDeclarator
				NullLiteralExpr
				executeM
			VariableDeclarator
				getClass
					proxy
				c
			VariableDeclarator
				params
			params
			ClassExpr
			params
			ClassExpr
			executeM
			findMethod
				c
				StringLiteralExpr
				params
			IfStmt
				==
					executeM
					NullLiteralExpr
				BlockStmt
					IfStmt
						isDebugEnabled
							log
						debug
							+
								StringLiteralExpr
								getClass
									proxy
							log
					ReturnStmt
			IfStmt
				BooleanLiteralExpr
				IfStmt
					isDebugEnabled
						log
					debug
						+
							+
								+
									+
										+
											StringLiteralExpr
											n
										StringLiteralExpr
									v
								StringLiteralExpr
							proxy
						log
			invoke
				proxy
				ArrayInitializerExpr
					n
					v
				executeM
			ReturnStmt
	MethodDeclaration
		BlockStmt
			VariableDeclarator
				NullLiteralExpr
				executeM
			VariableDeclarator
				getClass
					proxy
				c
			VariableDeclarator
				params
			params
			ClassExpr
			executeM
			findMethod
				c
				StringLiteralExpr
				params
			IfStmt
				==
					executeM
					NullLiteralExpr
				BlockStmt
					IfStmt
						isDebugEnabled
							log
						debug
							+
								StringLiteralExpr
								getClass
									proxy
							log
					ReturnStmt
						NullLiteralExpr
			ReturnStmt
				invoke
					proxy
					ArrayInitializerExpr
						n
					executeM
	MethodDeclaration
		BlockStmt
			TryStmt
				CatchClause
					BlockStmt
						ReturnStmt
							NullLiteralExpr
				CatchClause
					BlockStmt
						printStackTrace
							ex
						ReturnStmt
							NullLiteralExpr
				BlockStmt
					VariableDeclarator
						forName
							StringLiteralExpr
							Class
						urlCL
					VariableDeclarator
						paramT
					paramT
					getClass
						urls
					paramT
					ClassExpr
					VariableDeclarator
						findMethod
							urlCL
							StringLiteralExpr
							paramT
						m
					IfStmt
						==
							m
							NullLiteralExpr
						ReturnStmt
							NullLiteralExpr
					VariableDeclarator
						invoke
							urlCL
							ArrayInitializerExpr
								urls
								parent
							m
						cl
					ReturnStmt
						cl
	MethodDeclaration
		BlockStmt
			ReturnStmt
				guessInstall
					installSysProp
					homeSysProp
					jarName
					NullLiteralExpr
	MethodDeclaration
		BlockStmt
			VariableDeclarator
				NullLiteralExpr
				install
			VariableDeclarator
				NullLiteralExpr
				home
			IfStmt
				!=
					installSysProp
					NullLiteralExpr
				install
				getProperty
					installSysProp
					System
			IfStmt
				!=
					homeSysProp
					NullLiteralExpr
				home
				getProperty
					homeSysProp
					System
			IfStmt
				!=
					install
					NullLiteralExpr
				BlockStmt
					IfStmt
						==
							home
							NullLiteralExpr
						put
							homeSysProp
							install
							getProperties
								System
					ReturnStmt
						install
			VariableDeclarator
				getProperty
					StringLiteralExpr
					System
				cpath
			VariableDeclarator
				getProperty
					StringLiteralExpr
					System
				pathSep
			VariableDeclarator
				cpath
				pathSep
				st
			WhileStmt
				BlockStmt
					VariableDeclarator
						nextToken
							st
						path
					IfStmt
						endsWith
							jarName
							path
						BlockStmt
							VariableDeclarator
								+
									+
										path
										endsWith
											StringLiteralExpr
											path
										StringLiteralExpr
										StringLiteralExpr
									classFile
								fname
							IfStmt
								exists
									fname
								BlockStmt
									TryStmt
										CatchClause
											BlockStmt
												printStackTrace
													ex
										BlockStmt
											VariableDeclarator
												path
												f
											VariableDeclarator
												getParent
													f
												parentDir
											IfStmt
												==
													parentDir
													NullLiteralExpr
												parentDir
												path
											VariableDeclarator
												parentDir
												f1
											install
											getCanonicalPath
												f1
											IfStmt
												!=
													installSysProp
													NullLiteralExpr
												put
													installSysProp
													install
													getProperties
														System
											IfStmt
												&&
													==
														home
														NullLiteralExpr
													!=
														homeSysProp
														NullLiteralExpr
												put
													homeSysProp
													install
													getProperties
														System
											ReturnStmt
												install
						BlockStmt
							home
							substring
								-
									length
										path
									length
										jarName
								path
							TryStmt
								CatchClause
									BlockStmt
										printStackTrace
											ex
								BlockStmt
									IfStmt
										equals
											home
											StringLiteralExpr
										IfStmt
											endsWith
												File
												home
											BlockStmt
												home
												substring
													-
														length
															home
													home
										BlockStmt
											home
											getCanonicalPath
												StringLiteralExpr
									VariableDeclarator
										home
										f
									VariableDeclarator
										getParent
											f
										parentDir
									IfStmt
										==
											parentDir
											NullLiteralExpr
										parentDir
										home
									VariableDeclarator
										parentDir
										f1
									install
									getCanonicalPath
										f1
									IfStmt
										!=
											installSysProp
											NullLiteralExpr
										put
											installSysProp
											install
											getProperties
												System
									IfStmt
										&&
											==
												home
												NullLiteralExpr
											!=
												homeSysProp
												NullLiteralExpr
										put
											homeSysProp
											install
											getProperties
												System
									ReturnStmt
										install
				hasMoreTokens
					st
			IfStmt
				!=
					home
					NullLiteralExpr
				BlockStmt
					put
						installSysProp
						home
						getProperties
							System
					ReturnStmt
						home
			ReturnStmt
				NullLiteralExpr
	MethodDeclaration
		BlockStmt
			IfStmt
				isDebugEnabled
					log
				BlockStmt
					debug
						msg
						log
					ForStmt
						BlockStmt
							debug
								getFile
									i
									cp
								log
						<
							i
							cp
						VariableDeclarator
							i
							PrimitiveType
						++
							i
	FieldDeclaration
		VariableDeclarator
			getProperty
				StringLiteralExpr
				System
			PATH_SEPARATOR
	MethodDeclaration
		BlockStmt
			IfStmt
				==
					urls
					NullLiteralExpr
				ReturnStmt
					cp
			ForStmt
				BlockStmt
					IfStmt
						!=
							cp
							NullLiteralExpr
						cp
						getFile
							i
							urls
						cp
						+
							PATH_SEPARATOR
							getFile
								i
								urls
				<
					i
					urls
				VariableDeclarator
					i
					PrimitiveType
				++
					i
			ReturnStmt
				cp
	MethodDeclaration
		BlockStmt
			ReturnStmt
				setProperty
					o
					name
					value
					BooleanLiteralExpr
		PrimitiveType
	MethodDeclaration
		BlockStmt
			IfStmt
				>
					dbg
				d
					+
						+
							+
								+
									+
										+
											StringLiteralExpr
											getClass
												o
										StringLiteralExpr
									name
								StringLiteralExpr
							value
						StringLiteralExpr
			VariableDeclarator
				+
					StringLiteralExpr
					capitalize
						name
				setter
			TryStmt
				CatchClause
					BlockStmt
						warn
							+
								+
									+
										+
											+
												StringLiteralExpr
												o
											StringLiteralExpr
										name
									StringLiteralExpr
								value
							ex2
							log
				CatchClause
					BlockStmt
						IfStmt
							>
								dbg
							d
								+
									+
										+
											+
												+
													+
														StringLiteralExpr
														getClass
															o
													StringLiteralExpr
												name
											StringLiteralExpr
										value
									StringLiteralExpr
						IfStmt
							>
								dbg
							printStackTrace
								ex1
				CatchClause
					BlockStmt
						IfStmt
							>
								dbg
							d
								+
									+
										+
											+
												+
													+
														StringLiteralExpr
														getClass
															o
													StringLiteralExpr
												name
											StringLiteralExpr
										value
									StringLiteralExpr
						IfStmt
							>
								dbg
							printStackTrace
								iae
				CatchClause
					BlockStmt
						IfStmt
							>
								dbg
							d
								+
									+
										+
											+
												+
													+
														StringLiteralExpr
														getClass
															o
													StringLiteralExpr
												name
											StringLiteralExpr
										value
									StringLiteralExpr
						IfStmt
							>
								dbg
							printStackTrace
								ie
				BlockStmt
					VariableDeclarator
						findMethods
							getClass
								o
						methods
					VariableDeclarator
						NullLiteralExpr
						setPropertyMethodVoid
					VariableDeclarator
						NullLiteralExpr
						setPropertyMethodBool
					ForStmt
						BlockStmt
							VariableDeclarator
								getParameterTypes
									i
									methods
								paramT
							IfStmt
								&&
									&&
										equals
											getName
												i
												methods
											setter
										==
											paramT
									equals
										getName
											paramT
										StringLiteralExpr
								BlockStmt
									invoke
										o
										ArrayInitializerExpr
											value
										i
										methods
									ReturnStmt
										BooleanLiteralExpr
						<
							i
							methods
						VariableDeclarator
							i
							PrimitiveType
						++
							i
					ForStmt
						BlockStmt
							VariableDeclarator
								BooleanLiteralExpr
								ok
								PrimitiveType
							IfStmt
								&&
									equals
										getName
											i
											methods
										setter
									==
										getParameterTypes
											i
											methods
								BlockStmt
									VariableDeclarator
										getParameterTypes
											i
											methods
										paramType
									VariableDeclarator
										params
									IfStmt
										||
											equals
												getName
													paramType
												StringLiteralExpr
											equals
												getName
													paramType
												StringLiteralExpr
										IfStmt
											||
												equals
													getName
														paramType
													StringLiteralExpr
												equals
													getName
														paramType
													StringLiteralExpr
											IfStmt
												||
													equals
														getName
															paramType
														StringLiteralExpr
													equals
														getName
															paramType
														StringLiteralExpr
												IfStmt
													equals
														getName
															paramType
														StringLiteralExpr
													BlockStmt
														d
															+
																StringLiteralExpr
																getName
																	paramType
													BlockStmt
														TryStmt
															CatchClause
																BlockStmt
																	d
																		+
																			StringLiteralExpr
																			value
																	ok
																	BooleanLiteralExpr
															BlockStmt
																params
																getByName
																	value
																	InetAddress
												BlockStmt
													params
													value
											BlockStmt
												TryStmt
													CatchClause
														BlockStmt
															ok
															BooleanLiteralExpr
													BlockStmt
														params
														value
										BlockStmt
											TryStmt
												CatchClause
													BlockStmt
														ok
														BooleanLiteralExpr
												BlockStmt
													params
													value
									IfStmt
										ok
										BlockStmt
											invoke
												o
												params
												i
												methods
											ReturnStmt
												BooleanLiteralExpr
							IfStmt
								equals
									getName
										i
										methods
									StringLiteralExpr
								BlockStmt
									IfStmt
										==
											getReturnType
												i
												methods
											Boolean
										BlockStmt
											setPropertyMethodVoid
											i
											methods
										BlockStmt
											setPropertyMethodBool
											i
											methods
						<
							i
							methods
						VariableDeclarator
							i
							PrimitiveType
						++
							i
					IfStmt
						&&
							invokeSetProperty
							||
								!=
									setPropertyMethodBool
									NullLiteralExpr
								!=
									setPropertyMethodVoid
									NullLiteralExpr
						BlockStmt
							VariableDeclarator
								params
							params
							name
							params
							value
							IfStmt
								!=
									setPropertyMethodBool
									NullLiteralExpr
								BlockStmt
									invoke
										o
										params
										setPropertyMethodVoid
									ReturnStmt
										BooleanLiteralExpr
								BlockStmt
									TryStmt
										CatchClause
											BlockStmt
												IfStmt
													!=
														setPropertyMethodVoid
														NullLiteralExpr
													BlockStmt
														ThrowStmt
															biae
													BlockStmt
														invoke
															o
															params
															setPropertyMethodVoid
														ReturnStmt
															BooleanLiteralExpr
										BlockStmt
											ReturnStmt
												invoke
													o
													params
													setPropertyMethodBool
			ReturnStmt
				BooleanLiteralExpr
		PrimitiveType
		PrimitiveType
	MethodDeclaration
		BlockStmt
			VariableDeclarator
				+
					StringLiteralExpr
					capitalize
						name
				getter
			VariableDeclarator
				+
					StringLiteralExpr
					capitalize
						name
				isGetter
			TryStmt
				CatchClause
					BlockStmt
						warn
							+
								+
									+
										StringLiteralExpr
										o
									StringLiteralExpr
								name
							ex2
							log
				CatchClause
					BlockStmt
						IfStmt
							>
								dbg
							d
								+
									+
										+
											+
												StringLiteralExpr
												getClass
													o
											StringLiteralExpr
										name
									StringLiteralExpr
						IfStmt
							>
								dbg
							printStackTrace
								ex1
				CatchClause
					BlockStmt
						IfStmt
							>
								dbg
							d
								+
									+
										+
											+
												StringLiteralExpr
												getClass
													o
											StringLiteralExpr
										name
									StringLiteralExpr
						IfStmt
							>
								dbg
							printStackTrace
								iae
				CatchClause
					BlockStmt
						IfStmt
							>
								dbg
							d
								+
									+
										+
											+
												StringLiteralExpr
												getClass
													o
											StringLiteralExpr
										name
									StringLiteralExpr
						IfStmt
							>
								dbg
							printStackTrace
								ie
				BlockStmt
					VariableDeclarator
						findMethods
							getClass
								o
						methods
					VariableDeclarator
						NullLiteralExpr
						getPropertyMethod
					ForStmt
						BlockStmt
							VariableDeclarator
								getParameterTypes
									i
									methods
								paramT
							IfStmt
								&&
									equals
										getName
											i
											methods
										getter
									==
										paramT
								BlockStmt
									ReturnStmt
										invoke
											o
											NullLiteralExpr
											i
											methods
							IfStmt
								&&
									equals
										getName
											i
											methods
										isGetter
									==
										paramT
								BlockStmt
									ReturnStmt
										invoke
											o
											NullLiteralExpr
											i
											methods
							IfStmt
								equals
									getName
										i
										methods
									StringLiteralExpr
								BlockStmt
									getPropertyMethod
									i
									methods
						<
							i
							methods
						VariableDeclarator
							i
							PrimitiveType
						++
							i
					IfStmt
						!=
							getPropertyMethod
							NullLiteralExpr
						BlockStmt
							VariableDeclarator
								params
							params
							name
							ReturnStmt
								invoke
									o
									params
									getPropertyMethod
			ReturnStmt
				NullLiteralExpr
	MethodDeclaration
		BlockStmt
			VariableDeclarator
				+
					StringLiteralExpr
					capitalize
						name
				setter
			TryStmt
				CatchClause
					BlockStmt
						IfStmt
							>
								dbg
							d
								+
									+
										+
											StringLiteralExpr
											getClass
												o
										StringLiteralExpr
									name
						IfStmt
							>
								dbg
							printStackTrace
								ex1
				BlockStmt
					VariableDeclarator
						findMethods
							getClass
								o
						methods
					VariableDeclarator
						NullLiteralExpr
						setPropertyMethod
					ForStmt
						BlockStmt
							VariableDeclarator
								getParameterTypes
									i
									methods
								paramT
							IfStmt
								&&
									equals
										getName
											i
											methods
										setter
									==
										paramT
								BlockStmt
									invoke
										o
										ArrayInitializerExpr
										i
										methods
									ReturnStmt
						<
							i
							methods
						VariableDeclarator
							i
							PrimitiveType
						++
							i
	MethodDeclaration
		BlockStmt
			IfStmt
				getter
				ReturnStmt
					replaceProperties
						value
						getter
						NullLiteralExpr
			IfStmt
				getter
				BlockStmt
					VariableDeclarator
						ArrayInitializerExpr
							getter
						src
					ReturnStmt
						replaceProperties
							value
							NullLiteralExpr
							src
			ReturnStmt
				value
	MethodDeclaration
		BlockStmt
			IfStmt
				<
					indexOf
						StringLiteralExpr
						value
				BlockStmt
					ReturnStmt
						value
			VariableDeclarator
				sb
			VariableDeclarator
				prev
				PrimitiveType
			VariableDeclarator
				pos
				PrimitiveType
			WhileStmt
				BlockStmt
					IfStmt
						>
							pos
						BlockStmt
							append
								substring
									prev
									pos
									value
								sb
					IfStmt
						==
							pos
							-
								length
									value
						IfStmt
							!=
								charAt
									+
										pos
									value
								CharLiteralExpr
							BlockStmt
								VariableDeclarator
									indexOf
										CharLiteralExpr
										pos
										value
									endName
									PrimitiveType
								IfStmt
									<
										endName
									BlockStmt
										append
											substring
												pos
												value
											sb
										prev
										length
											value
										ContinueStmt
								VariableDeclarator
									substring
										+
											pos
										endName
										value
									n
								VariableDeclarator
									NullLiteralExpr
									v
								IfStmt
									!=
										staticProp
										NullLiteralExpr
									BlockStmt
										v
										get
											n
											staticProp
								IfStmt
									&&
										==
											v
											NullLiteralExpr
										!=
											dynamicProp
											NullLiteralExpr
									BlockStmt
										ForStmt
											BlockStmt
												v
												getProperty
													n
													i
													dynamicProp
												IfStmt
													!=
														v
														NullLiteralExpr
													BlockStmt
														BreakStmt
											<
												i
												dynamicProp
											VariableDeclarator
												i
												PrimitiveType
											++
												i
								IfStmt
									==
										v
										NullLiteralExpr
									v
									+
										+
											StringLiteralExpr
											n
										StringLiteralExpr
								append
									v
									sb
								prev
								+
									endName
							BlockStmt
								append
									CharLiteralExpr
									sb
								prev
								+
									pos
						BlockStmt
							append
								CharLiteralExpr
								sb
							prev
							+
								pos
				>=
					pos
					indexOf
						StringLiteralExpr
						prev
						value
			IfStmt
				<
					prev
					length
						value
				append
					substring
						prev
						value
					sb
			ReturnStmt
				toString
					sb
	MethodDeclaration
		BlockStmt
			IfStmt
				||
					==
						name
						NullLiteralExpr
					==
						length
							name
				BlockStmt
					ReturnStmt
						name
			VariableDeclarator
				toCharArray
					name
				chars
				PrimitiveType
			chars
			toUpperCase
				chars
				Character
			ReturnStmt
				chars
	MethodDeclaration
		BlockStmt
			IfStmt
				||
					==
						name
						NullLiteralExpr
					==
						length
							name
				BlockStmt
					ReturnStmt
						name
			VariableDeclarator
				toCharArray
					name
				chars
				PrimitiveType
			chars
			toLowerCase
				chars
				Character
			ReturnStmt
				chars
	MethodDeclaration
		BlockStmt
			TryStmt
				CatchClause
					BlockStmt
						printStackTrace
							ex
				BlockStmt
					VariableDeclarator
						getFilesByExt
							dir
							StringLiteralExpr
						cpComp
					IfStmt
						!=
							cpComp
							NullLiteralExpr
						BlockStmt
							VariableDeclarator
								cpComp
								jarCount
								PrimitiveType
							ForStmt
								BlockStmt
									VariableDeclarator
										getURL
											dir
											i
											cpComp
										url
									IfStmt
										!=
											url
											NullLiteralExpr
										addElement
											url
											cpV
								<
									i
									jarCount
								VariableDeclarator
									i
									PrimitiveType
								++
									i
	MethodDeclaration
		BlockStmt
			TryStmt
				CatchClause
					BlockStmt
						printStackTrace
							ex
				BlockStmt
					VariableDeclarator
						+
							getProperty
								StringLiteralExpr
								System
							StringLiteralExpr
						f
					IfStmt
						!
							exists
								f
						BlockStmt
							f
							+
								getProperty
									StringLiteralExpr
									System
								StringLiteralExpr
							IfStmt
								exists
									f
								BlockStmt
									IfStmt
										isDebugEnabled
											log
										debug
											+
												+
													StringLiteralExpr
													getProperty
														StringLiteralExpr
														System
												StringLiteralExpr
											log
					VariableDeclarator
						StringLiteralExpr
						StringLiteralExpr
						getAbsolutePath
							f
						url
					addElement
						url
						v
	MethodDeclaration
		BlockStmt
			VariableDeclarator
				ld
				dir
			VariableDeclarator
				NullLiteralExpr
				names
			VariableDeclarator
				ext
				lext
			IfStmt
				isDirectory
					dir
				BlockStmt
					names
					list
						MethodDeclaration
							BlockStmt
								IfStmt
									endsWith
										lext
										name
									BlockStmt
										ReturnStmt
											BooleanLiteralExpr
								ReturnStmt
									BooleanLiteralExpr
							PrimitiveType
						dir
			ReturnStmt
				names
	MethodDeclaration
		BlockStmt
			TryStmt
				CatchClause
					BlockStmt
						printStackTrace
							ex
						ReturnStmt
							NullLiteralExpr
				BlockStmt
					VariableDeclarator
						base
						baseF
					VariableDeclarator
						baseF
						file
						f
					VariableDeclarator
						getCanonicalPath
							f
						path
					IfStmt
						isDirectory
							f
						BlockStmt
							path
							StringLiteralExpr
					IfStmt
						!
							exists
								f
						ReturnStmt
							NullLiteralExpr
					ReturnStmt
						StringLiteralExpr
						StringLiteralExpr
						path
	MethodDeclaration
		BlockStmt
			VariableDeclarator
				getProperty
					StringLiteralExpr
					System
				sep
			VariableDeclarator
				token
			VariableDeclarator
				st
			IfStmt
				!=
					cp
					NullLiteralExpr
				BlockStmt
					st
					cp
					sep
					WhileStmt
						BlockStmt
							VariableDeclarator
								nextToken
									st
								f
							VariableDeclarator
								getCanonicalPath
									f
								path
							IfStmt
								isDirectory
									f
								BlockStmt
									path
									StringLiteralExpr
							VariableDeclarator
								StringLiteralExpr
								StringLiteralExpr
								path
								url
							IfStmt
								!
									contains
										url
										jars
								BlockStmt
									addElement
										url
										jars
						hasMoreTokens
							st
	MethodDeclaration
		BlockStmt
			VariableDeclarator
				size
					v
				urls
			ForStmt
				BlockStmt
					i
					urls
					elementAt
						i
						v
				<
					i
					size
						v
				VariableDeclarator
					i
					PrimitiveType
				++
					i
			ReturnStmt
				urls
	MethodDeclaration
		BlockStmt
			VariableDeclarator
				jarsV
			IfStmt
				!=
					dir
					NullLiteralExpr
				BlockStmt
					VariableDeclarator
						getURL
							dir
							StringLiteralExpr
						url
					IfStmt
						!=
							url
							NullLiteralExpr
						addElement
							url
							jarsV
					addToClassPath
						jarsV
						dir
			IfStmt
				!=
					cpath
					NullLiteralExpr
				addJarsFromClassPath
					jarsV
					cpath
			IfStmt
				!=
					cpathProp
					NullLiteralExpr
				BlockStmt
					VariableDeclarator
						getProperty
							cpathProp
							System
						cpath1
					addJarsFromClassPath
						jarsV
						cpath1
			IfStmt
				addTools
				addToolsJar
					jarsV
			ReturnStmt
				getClassPath
					jarsV
		PrimitiveType
	MethodDeclaration
		BlockStmt
			VariableDeclarator
				NullLiteralExpr
				args0
			IfStmt
				!=
					NullLiteralExpr
					findMethod
						getClass
							proxy
						StringLiteralExpr
						ArrayInitializerExpr
				BlockStmt
					args0
					callMethod0
						proxy
						StringLiteralExpr
			IfStmt
				==
					args0
					NullLiteralExpr
				BlockStmt
					args0
					findBooleanSetters
						getClass
							proxy
			VariableDeclarator
				NullLiteralExpr
				h
			IfStmt
				!=
					NullLiteralExpr
					findMethod
						getClass
							proxy
						StringLiteralExpr
						ArrayInitializerExpr
				BlockStmt
					h
					callMethod0
						proxy
						StringLiteralExpr
			ReturnStmt
				processArgs
					proxy
					args
					args0
					NullLiteralExpr
					h
		PrimitiveType
	MethodDeclaration
		BlockStmt
			ForStmt
				BlockStmt
					VariableDeclarator
						i
						args
						arg
					IfStmt
						startsWith
							StringLiteralExpr
							arg
						arg
						substring
							arg
					IfStmt
						&&
							!=
								aliases
								NullLiteralExpr
							!=
								get
									arg
									aliases
								NullLiteralExpr
						arg
						get
							arg
							aliases
					IfStmt
						!=
							args0
							NullLiteralExpr
						BlockStmt
							VariableDeclarator
								BooleanLiteralExpr
								set
								PrimitiveType
							ForStmt
								BlockStmt
									IfStmt
										equalsIgnoreCase
											arg
											j
											args0
										BlockStmt
											setProperty
												proxy
												j
												args0
												StringLiteralExpr
											set
											BooleanLiteralExpr
											BreakStmt
								<
									j
									args0
								VariableDeclarator
									j
									PrimitiveType
								++
									j
							IfStmt
								set
								ContinueStmt
					IfStmt
						!=
							args1
							NullLiteralExpr
						BlockStmt
							++
								i
							IfStmt
								>=
									i
									args
								ReturnStmt
									BooleanLiteralExpr
							setProperty
								proxy
								arg
								i
								args
						BlockStmt
							ForStmt
								BlockStmt
									IfStmt
										equalsIgnoreCase
											arg
											j
											args1
										BlockStmt
											++
												i
											IfStmt
												>=
													i
													args
												ReturnStmt
													BooleanLiteralExpr
											setProperty
												proxy
												arg
												i
												args
											BreakStmt
								<
									j
									args1
								VariableDeclarator
									j
									PrimitiveType
								++
									j
				<
					i
					args
				VariableDeclarator
					i
					PrimitiveType
				++
					i
			ReturnStmt
				BooleanLiteralExpr
		PrimitiveType
	MethodDeclaration
		BlockStmt
			clear
				objectMethods
	MethodDeclaration
		BlockStmt
			VariableDeclarator
				findMethods
					c
				m
			IfStmt
				==
					m
					NullLiteralExpr
				ReturnStmt
					NullLiteralExpr
			VariableDeclarator
				v
			ForStmt
				BlockStmt
					IfStmt
						&&
							startsWith
								StringLiteralExpr
								getName
									i
									m
							==
								getParameterTypes
									i
									m
						BlockStmt
							VariableDeclarator
								substring
									getName
										i
										m
								arg
							addElement
								unCapitalize
									arg
								v
				<
					i
					m
				VariableDeclarator
					i
					PrimitiveType
				++
					i
			VariableDeclarator
				size
					v
				s
			ForStmt
				BlockStmt
					i
					s
					elementAt
						i
						v
				<
					i
					s
				VariableDeclarator
					i
					PrimitiveType
				++
					i
			ReturnStmt
				s
	MethodDeclaration
		BlockStmt
			VariableDeclarator
				findMethods
					c
				m
			IfStmt
				==
					m
					NullLiteralExpr
				ReturnStmt
					NullLiteralExpr
			VariableDeclarator
				v
			ForStmt
				BlockStmt
					IfStmt
						&&
							&&
								startsWith
									StringLiteralExpr
									getName
										i
										m
								==
									getParameterTypes
										i
										m
							equalsIgnoreCase
								getName
									getParameterTypes
										i
										m
								StringLiteralExpr
						BlockStmt
							VariableDeclarator
								substring
									getName
										i
										m
								arg
							addElement
								unCapitalize
									arg
								v
				<
					i
					m
				VariableDeclarator
					i
					PrimitiveType
				++
					i
			VariableDeclarator
				size
					v
				s
			ForStmt
				BlockStmt
					i
					s
					elementAt
						i
						v
				<
					i
					s
				VariableDeclarator
					i
					PrimitiveType
				++
					i
			ReturnStmt
				s
	FieldDeclaration
		VariableDeclarator
			objectMethods
	MethodDeclaration
		BlockStmt
			VariableDeclarator
				get
					c
					objectMethods
				methods
			IfStmt
				!=
					methods
					NullLiteralExpr
				ReturnStmt
					methods
			methods
			getMethods
				c
			put
				c
				methods
				objectMethods
			ReturnStmt
				methods
	MethodDeclaration
		BlockStmt
			VariableDeclarator
				findMethods
					c
				methods
			IfStmt
				==
					methods
					NullLiteralExpr
				ReturnStmt
					NullLiteralExpr
			ForStmt
				BlockStmt
					IfStmt
						equals
							name
							getName
								i
								methods
						BlockStmt
							VariableDeclarator
								getParameterTypes
									i
									methods
								methodParams
							IfStmt
								==
									methodParams
									NullLiteralExpr
								IfStmt
									||
										==
											params
											NullLiteralExpr
										==
											params
									ReturnStmt
										i
										methods
							IfStmt
								==
									params
									NullLiteralExpr
								IfStmt
									||
										==
											methodParams
											NullLiteralExpr
										==
											methodParams
									ReturnStmt
										i
										methods
							IfStmt
								!=
									params
									methodParams
								ContinueStmt
							VariableDeclarator
								BooleanLiteralExpr
								found
								PrimitiveType
							ForStmt
								BlockStmt
									IfStmt
										!=
											j
											params
											j
											methodParams
										BlockStmt
											found
											BooleanLiteralExpr
											BreakStmt
								<
									j
									params
								VariableDeclarator
									j
									PrimitiveType
								++
									j
							IfStmt
								found
								ReturnStmt
									i
									methods
				<
					i
					methods
				VariableDeclarator
					i
					PrimitiveType
				++
					i
			ReturnStmt
				NullLiteralExpr
	MethodDeclaration
		BlockStmt
			TryStmt
				CatchClause
					BlockStmt
						printStackTrace
							ex
				BlockStmt
					VariableDeclarator
						findMethods
							getClass
								obj
						myMethods
					ForStmt
						BlockStmt
							IfStmt
								equals
									getName
										i
										myMethods
									methodN
								BlockStmt
									VariableDeclarator
										getDeclaringClass
											i
											myMethods
										declaring
									VariableDeclarator
										getSuperclass
											declaring
										parentOfDeclaring
									IfStmt
										!
											equals
												getName
													parentOfDeclaring
												StringLiteralExpr
										BlockStmt
											ReturnStmt
												BooleanLiteralExpr
						<
							i
							myMethods
						VariableDeclarator
							i
							PrimitiveType
						++
							i
			ReturnStmt
				BooleanLiteralExpr
		PrimitiveType
	MethodDeclaration
		BlockStmt
			VariableDeclarator
				p
			p
			getClass
				args
			VariableDeclarator
				getMethod
					StringLiteralExpr
					p
					c
				m
			invoke
				c
				ArrayInitializerExpr
					args
				m
	MethodDeclaration
		BlockStmt
			IfStmt
				||
					==
						target
						NullLiteralExpr
					==
						param1
						NullLiteralExpr
				BlockStmt
					d
						+
							+
								+
									StringLiteralExpr
									target
								StringLiteralExpr
							param1
			IfStmt
				>
					dbg
				d
					+
						+
							+
								+
									+
										StringLiteralExpr
										getName
											getClass
												target
									StringLiteralExpr
								getName
									getClass
										param1
							StringLiteralExpr
						typeParam1
			VariableDeclarator
				params
			IfStmt
				==
					typeParam1
					NullLiteralExpr
				params
				loadClass
					typeParam1
					cl
				params
				getClass
					param1
			VariableDeclarator
				findMethod
					getClass
						target
					methodN
					params
				m
			IfStmt
				==
					m
					NullLiteralExpr
				ThrowStmt
					+
						+
							getName
								getClass
									target
							StringLiteralExpr
						methodN
			ReturnStmt
				invoke
					target
					ArrayInitializerExpr
						param1
					m
	MethodDeclaration
		BlockStmt
			IfStmt
				==
					target
					NullLiteralExpr
				BlockStmt
					d
						+
							StringLiteralExpr
							target
					ReturnStmt
						NullLiteralExpr
			IfStmt
				>
					dbg
				d
					+
						+
							+
								StringLiteralExpr
								getName
									getClass
										target
							StringLiteralExpr
						methodN
			VariableDeclarator
				params
			VariableDeclarator
				findMethod
					getClass
						target
					methodN
					params
				m
			IfStmt
				==
					m
					NullLiteralExpr
				ThrowStmt
					+
						+
							getName
								getClass
									target
							StringLiteralExpr
						methodN
			ReturnStmt
				invoke
					target
					emptyArray
					m
	FieldDeclaration
		VariableDeclarator
			ArrayInitializerExpr
			emptyArray
	MethodDeclaration
		BlockStmt
			VariableDeclarator
				NullLiteralExpr
				m
			m
			findMethod
				getClass
					target
				methodN
				typeParams
			IfStmt
				==
					m
					NullLiteralExpr
				BlockStmt
					d
						+
							+
								+
									+
										+
											StringLiteralExpr
											methodN
										StringLiteralExpr
									target
								StringLiteralExpr
							getClass
								target
					ReturnStmt
						NullLiteralExpr
			VariableDeclarator
				invoke
					target
					params
					m
				o
			IfStmt
				>
					dbg
				BlockStmt
					VariableDeclarator
						sb
					append
						+
							+
								+
									+
										StringLiteralExpr
										getName
											getClass
												target
									StringLiteralExpr
								methodN
							StringLiteralExpr
						sb
					ForStmt
						BlockStmt
							IfStmt
								>
									i
								append
									StringLiteralExpr
									sb
							append
								i
								params
								sb
						<
							i
							params
						VariableDeclarator
							i
							PrimitiveType
						++
							i
					append
						StringLiteralExpr
						sb
					d
						toString
							sb
			ReturnStmt
				o
	MethodDeclaration
		BlockStmt
			VariableDeclarator
				NullLiteralExpr
				result
			IfStmt
				equals
					getName
						paramType
					StringLiteralExpr
				IfStmt
					||
						equals
							getName
								paramType
							StringLiteralExpr
						equals
							getName
								paramType
							StringLiteralExpr
					IfStmt
						||
							equals
								getName
									paramType
								StringLiteralExpr
							equals
								getName
									paramType
								StringLiteralExpr
						IfStmt
							equals
								getName
									paramType
								StringLiteralExpr
							BlockStmt
								d
									+
										StringLiteralExpr
										getName
											paramType
							BlockStmt
								TryStmt
									CatchClause
										BlockStmt
											d
												+
													StringLiteralExpr
													object
									BlockStmt
										result
										getByName
											object
											InetAddress
						BlockStmt
							result
							object
					BlockStmt
						TryStmt
							CatchClause
								BlockStmt
							BlockStmt
								result
								object
				BlockStmt
					result
					object
			IfStmt
				==
					result
					NullLiteralExpr
				BlockStmt
					ThrowStmt
						+
							StringLiteralExpr
							object
			ReturnStmt
				result
	ClassOrInterfaceDeclaration
		MethodDeclaration
	ClassOrInterfaceDeclaration
		MethodDeclaration
	FieldDeclaration
		VariableDeclarator
			dbg
			PrimitiveType
	MethodDeclaration
		BlockStmt
			IfStmt
				isDebugEnabled
					log
				debug
					+
						StringLiteralExpr
						s
					log
