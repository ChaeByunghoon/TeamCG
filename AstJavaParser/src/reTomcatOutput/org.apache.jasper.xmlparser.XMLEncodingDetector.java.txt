ClassOrInterfaceDeclaration
	FieldDeclaration
		VariableDeclarator
			stream
	FieldDeclaration
		VariableDeclarator
			encoding
	FieldDeclaration
		VariableDeclarator
			isEncodingSetInProlog
			PrimitiveType
	FieldDeclaration
		VariableDeclarator
			isBomPresent
			PrimitiveType
	FieldDeclaration
		VariableDeclarator
			skip
			PrimitiveType
	FieldDeclaration
		VariableDeclarator
			isBigEndian
	FieldDeclaration
		VariableDeclarator
			reader
	FieldDeclaration
		VariableDeclarator
			DEFAULT_BUFFER_SIZE
			PrimitiveType
	FieldDeclaration
		VariableDeclarator
			DEFAULT_XMLDECL_BUFFER_SIZE
			PrimitiveType
	FieldDeclaration
		VariableDeclarator
			fAllowJavaEncodings
			PrimitiveType
	FieldDeclaration
		VariableDeclarator
			fSymbolTable
	FieldDeclaration
		VariableDeclarator
			fCurrentEntity
	FieldDeclaration
		VariableDeclarator
			DEFAULT_BUFFER_SIZE
			fBufferSize
			PrimitiveType
	FieldDeclaration
		VariableDeclarator
			lineNumber
			PrimitiveType
	FieldDeclaration
		VariableDeclarator
			columnNumber
			PrimitiveType
	FieldDeclaration
		VariableDeclarator
			literal
			PrimitiveType
	FieldDeclaration
		VariableDeclarator
			PrimitiveType
			DEFAULT_BUFFER_SIZE
			ch
			PrimitiveType
	FieldDeclaration
		VariableDeclarator
			position
			PrimitiveType
	FieldDeclaration
		VariableDeclarator
			count
			PrimitiveType
	FieldDeclaration
		VariableDeclarator
			BooleanLiteralExpr
			mayReadChunks
			PrimitiveType
	FieldDeclaration
		VariableDeclarator
			fString
	FieldDeclaration
		VariableDeclarator
			fStringBuffer
	FieldDeclaration
		VariableDeclarator
			fStringBuffer2
	FieldDeclaration
		VariableDeclarator
			StringLiteralExpr
			fVersionSymbol
	FieldDeclaration
		VariableDeclarator
			StringLiteralExpr
			fEncodingSymbol
	FieldDeclaration
		VariableDeclarator
			StringLiteralExpr
			fStandaloneSymbol
	FieldDeclaration
		VariableDeclarator
			fMarkupDepth
			PrimitiveType
	FieldDeclaration
		VariableDeclarator
			fStrings
	FieldDeclaration
		VariableDeclarator
			err
	ConstructorDeclaration
		BlockStmt
			fSymbolTable
			fCurrentEntity
	MethodDeclaration
		BlockStmt
			VariableDeclarator
				getInputStream
					fname
					jarFile
					ctxt
					err
					JspUtil
				inStream
			VariableDeclarator
				detector
			VariableDeclarator
				getEncoding
					inStream
					err
					detector
				ret
			close
				inStream
			ReturnStmt
				ret
	MethodDeclaration
		BlockStmt
			in
			err
			createInitialReader
			scanXMLDecl
			ReturnStmt
				ArrayInitializerExpr
					valueOf
						Boolean
					valueOf
						Boolean
					valueOf
						Integer
	MethodDeclaration
		BlockStmt
	MethodDeclaration
		BlockStmt
			stream
			stream
			IfStmt
				==
					encoding
					NullLiteralExpr
				BlockStmt
					VariableDeclarator
						PrimitiveType
						b4
						PrimitiveType
					VariableDeclarator
						count
						PrimitiveType
					ForStmt
						BlockStmt
							count
							b4
							read
								stream
							PrimitiveType
						<
							count
						++
							count
					IfStmt
						==
							count
						BlockStmt
							reader
							createReader
								stream
								encoding
								isBigEndian
						BlockStmt
							VariableDeclarator
								getEncodingName
									b4
									count
								encodingDesc
							encoding
							encodingDesc
							isBigEndian
							encodingDesc
							IfStmt
								>
									encodingDesc
								BlockStmt
									isBomPresent
									BooleanLiteralExpr
									skip
									encodingDesc
								BlockStmt
									isBomPresent
									encodingDesc
									skip
									encodingDesc
							reset
								stream
							IfStmt
								&&
									>
										count
									equals
										StringLiteralExpr
										encoding
								BlockStmt
									VariableDeclarator
										&
											b4
										b0
										PrimitiveType
									VariableDeclarator
										&
											b4
										b1
										PrimitiveType
									VariableDeclarator
										&
											b4
										b2
										PrimitiveType
									IfStmt
										&&
											&&
												==
													b0
												==
													b1
											==
												b2
										BlockStmt
											skip
												stream
							reader
							createReader
								stream
								encoding
								isBigEndian
	MethodDeclaration
		BlockStmt
			IfStmt
				==
					encoding
					NullLiteralExpr
				BlockStmt
					encoding
					StringLiteralExpr
			VariableDeclarator
				toUpperCase
					Locale
					encoding
				ENCODING
			IfStmt
				equals
					StringLiteralExpr
					ENCODING
				BlockStmt
					ReturnStmt
						inputStream
						fBufferSize
			IfStmt
				equals
					StringLiteralExpr
					ENCODING
				BlockStmt
					ReturnStmt
						inputStream
						fBufferSize
			IfStmt
				equals
					StringLiteralExpr
					ENCODING
				BlockStmt
					IfStmt
						!=
							isBigEndian
							NullLiteralExpr
						BlockStmt
							jspError
								StringLiteralExpr
								encoding
								err
						BlockStmt
							VariableDeclarator
								booleanValue
									isBigEndian
								isBE
								PrimitiveType
							IfStmt
								isBE
								BlockStmt
									ReturnStmt
										inputStream
										UCSReader
								BlockStmt
									ReturnStmt
										inputStream
										UCSReader
			IfStmt
				equals
					StringLiteralExpr
					ENCODING
				BlockStmt
					IfStmt
						!=
							isBigEndian
							NullLiteralExpr
						BlockStmt
							jspError
								StringLiteralExpr
								encoding
								err
						BlockStmt
							VariableDeclarator
								booleanValue
									isBigEndian
								isBE
								PrimitiveType
							IfStmt
								isBE
								BlockStmt
									ReturnStmt
										inputStream
										UCSReader
								BlockStmt
									ReturnStmt
										inputStream
										UCSReader
			VariableDeclarator
				isValidIANAEncoding
					encoding
					XMLChar
				validIANA
				PrimitiveType
			VariableDeclarator
				isValidJavaEncoding
					encoding
					XMLChar
				validJava
				PrimitiveType
			IfStmt
				||
					!
						validIANA
					&&
						fAllowJavaEncodings
						!
							validJava
				BlockStmt
					jspError
						StringLiteralExpr
						encoding
						err
					encoding
					StringLiteralExpr
			VariableDeclarator
				getIANA2JavaMapping
					ENCODING
					EncodingMap
				javaEncoding
			IfStmt
				==
					javaEncoding
					NullLiteralExpr
				BlockStmt
					IfStmt
						fAllowJavaEncodings
						BlockStmt
							jspError
								StringLiteralExpr
								encoding
								err
							javaEncoding
							StringLiteralExpr
						BlockStmt
							javaEncoding
							encoding
			ReturnStmt
				inputStream
				javaEncoding
	MethodDeclaration
		BlockStmt
			IfStmt
				<
					count
				BlockStmt
					ReturnStmt
						ArrayInitializerExpr
							StringLiteralExpr
							NullLiteralExpr
							Boolean
							valueOf
								Integer
			VariableDeclarator
				&
					b4
				b0
				PrimitiveType
			VariableDeclarator
				&
					b4
				b1
				PrimitiveType
			IfStmt
				&&
					==
						b0
					==
						b1
				BlockStmt
					ReturnStmt
						ArrayInitializerExpr
							StringLiteralExpr
							Boolean
							valueOf
								Integer
			IfStmt
				&&
					==
						b0
					==
						b1
				BlockStmt
					ReturnStmt
						ArrayInitializerExpr
							StringLiteralExpr
							Boolean
							valueOf
								Integer
			IfStmt
				<
					count
				BlockStmt
					ReturnStmt
						ArrayInitializerExpr
							StringLiteralExpr
							NullLiteralExpr
							Boolean
							valueOf
								Integer
			VariableDeclarator
				&
					b4
				b2
				PrimitiveType
			IfStmt
				&&
					&&
						==
							b0
						==
							b1
					==
						b2
				BlockStmt
					ReturnStmt
						ArrayInitializerExpr
							StringLiteralExpr
							NullLiteralExpr
							valueOf
								Integer
			IfStmt
				<
					count
				BlockStmt
					ReturnStmt
						ArrayInitializerExpr
							StringLiteralExpr
							NullLiteralExpr
							valueOf
								Integer
			VariableDeclarator
				&
					b4
				b3
				PrimitiveType
			IfStmt
				&&
					&&
						&&
							==
								b0
							==
								b1
						==
							b2
					==
						b3
				BlockStmt
					ReturnStmt
						ArrayInitializerExpr
							StringLiteralExpr
							BooleanLiteralExpr
							valueOf
								Integer
			IfStmt
				&&
					&&
						&&
							==
								b0
							==
								b1
						==
							b2
					==
						b3
				BlockStmt
					ReturnStmt
						ArrayInitializerExpr
							StringLiteralExpr
							BooleanLiteralExpr
							valueOf
								Integer
			IfStmt
				&&
					&&
						&&
							==
								b0
							==
								b1
						==
							b2
					==
						b3
				BlockStmt
					ReturnStmt
						ArrayInitializerExpr
							StringLiteralExpr
							NullLiteralExpr
							valueOf
								Integer
			IfStmt
				&&
					&&
						&&
							==
								b0
							==
								b1
						==
							b2
					==
						b3
				BlockStmt
					ReturnStmt
						ArrayInitializerExpr
							StringLiteralExpr
							NullLiteralExpr
							valueOf
								Integer
			IfStmt
				&&
					&&
						&&
							==
								b0
							==
								b1
						==
							b2
					==
						b3
				BlockStmt
					ReturnStmt
						ArrayInitializerExpr
							StringLiteralExpr
							BooleanLiteralExpr
							valueOf
								Integer
			IfStmt
				&&
					&&
						&&
							==
								b0
							==
								b1
						==
							b2
					==
						b3
				BlockStmt
					ReturnStmt
						ArrayInitializerExpr
							StringLiteralExpr
							BooleanLiteralExpr
							valueOf
								Integer
			IfStmt
				&&
					&&
						&&
							==
								b0
							==
								b1
						==
							b2
					==
						b3
				BlockStmt
					ReturnStmt
						ArrayInitializerExpr
							StringLiteralExpr
							NullLiteralExpr
							valueOf
								Integer
			ReturnStmt
				ArrayInitializerExpr
					StringLiteralExpr
					NullLiteralExpr
					Boolean
					valueOf
						Integer
		PrimitiveType
		PrimitiveType
	MethodDeclaration
		BlockStmt
			ReturnStmt
				BooleanLiteralExpr
		PrimitiveType
	MethodDeclaration
		BlockStmt
			IfStmt
				==
					fCurrentEntity
					fCurrentEntity
				BlockStmt
					load
						BooleanLiteralExpr
			VariableDeclarator
				fCurrentEntity
				fCurrentEntity
				c
				PrimitiveType
			IfStmt
				isExternal
					fCurrentEntity
				BlockStmt
					ReturnStmt
						c
				BlockStmt
					ReturnStmt
						!=
							c
							CharLiteralExpr
						CharLiteralExpr
						c
		PrimitiveType
	MethodDeclaration
		BlockStmt
			IfStmt
				==
					fCurrentEntity
					fCurrentEntity
				BlockStmt
					load
						BooleanLiteralExpr
			VariableDeclarator
				++
					fCurrentEntity
				fCurrentEntity
				c
				PrimitiveType
			VariableDeclarator
				BooleanLiteralExpr
				external
				PrimitiveType
			IfStmt
				||
					==
						c
						CharLiteralExpr
					&&
						==
							c
							CharLiteralExpr
						external
						isExternal
							fCurrentEntity
				BlockStmt
					++
						fCurrentEntity
					fCurrentEntity
					IfStmt
						==
							fCurrentEntity
							fCurrentEntity
						BlockStmt
							fCurrentEntity
							c
							PrimitiveType
							load
								BooleanLiteralExpr
					IfStmt
						&&
							==
								c
								CharLiteralExpr
							external
						BlockStmt
							IfStmt
								!=
									++
										fCurrentEntity
									fCurrentEntity
									CharLiteralExpr
								BlockStmt
									--
										fCurrentEntity
							c
							CharLiteralExpr
			++
				fCurrentEntity
			ReturnStmt
				c
		PrimitiveType
	MethodDeclaration
		BlockStmt
			IfStmt
				==
					fCurrentEntity
					fCurrentEntity
				BlockStmt
					load
						BooleanLiteralExpr
			VariableDeclarator
				fCurrentEntity
				offset
				PrimitiveType
			IfStmt
				isNameStart
					offset
					fCurrentEntity
					XMLChar
				BlockStmt
					IfStmt
						==
							++
								fCurrentEntity
							fCurrentEntity
						BlockStmt
							fCurrentEntity
							offset
							fCurrentEntity
							offset
							IfStmt
								load
									BooleanLiteralExpr
								BlockStmt
									++
										fCurrentEntity
									VariableDeclarator
										addSymbol
											fCurrentEntity
											fSymbolTable
										symbol
									ReturnStmt
										symbol
					WhileStmt
						BlockStmt
							IfStmt
								==
									++
										fCurrentEntity
									fCurrentEntity
								BlockStmt
									VariableDeclarator
										-
											fCurrentEntity
											offset
										length
										PrimitiveType
									IfStmt
										==
											length
											fBufferSize
										BlockStmt
											arraycopy
												fCurrentEntity
												offset
												fCurrentEntity
												length
												System
										BlockStmt
											VariableDeclarator
												PrimitiveType
												*
													fBufferSize
												tmp
												PrimitiveType
											arraycopy
												fCurrentEntity
												offset
												tmp
												length
												System
											fCurrentEntity
											tmp
											fBufferSize
									offset
									IfStmt
										load
											length
											BooleanLiteralExpr
										BlockStmt
											BreakStmt
						isName
							fCurrentEntity
							fCurrentEntity
							XMLChar
			VariableDeclarator
				-
					fCurrentEntity
					offset
				length
				PrimitiveType
			fCurrentEntity
			length
			VariableDeclarator
				NullLiteralExpr
				symbol
			IfStmt
				>
					length
				BlockStmt
					symbol
					addSymbol
						fCurrentEntity
						offset
						length
						fSymbolTable
			ReturnStmt
				symbol
	MethodDeclaration
		BlockStmt
			IfStmt
				==
					fCurrentEntity
					fCurrentEntity
				IfStmt
					==
						fCurrentEntity
						-
							fCurrentEntity
					BlockStmt
						fCurrentEntity
						-
							fCurrentEntity
						fCurrentEntity
						load
							BooleanLiteralExpr
						fCurrentEntity
				BlockStmt
					load
						BooleanLiteralExpr
			VariableDeclarator
				fCurrentEntity
				offset
				PrimitiveType
			VariableDeclarator
				offset
				fCurrentEntity
				c
				PrimitiveType
			VariableDeclarator
				newlines
				PrimitiveType
			VariableDeclarator
				isExternal
					fCurrentEntity
				external
				PrimitiveType
			IfStmt
				||
					==
						c
						CharLiteralExpr
					&&
						==
							c
							CharLiteralExpr
						external
				BlockStmt
					DoStmt
						BlockStmt
							c
							++
								fCurrentEntity
							fCurrentEntity
							IfStmt
								&&
									==
										c
										CharLiteralExpr
									external
								IfStmt
									==
										c
										CharLiteralExpr
									BlockStmt
										--
											fCurrentEntity
										BreakStmt
									BlockStmt
										++
											newlines
										++
											fCurrentEntity
										fCurrentEntity
										IfStmt
											==
												fCurrentEntity
												fCurrentEntity
											BlockStmt
												offset
												fCurrentEntity
												newlines
												IfStmt
													load
														newlines
														BooleanLiteralExpr
													BlockStmt
														BreakStmt
								BlockStmt
									++
										newlines
									++
										fCurrentEntity
									fCurrentEntity
									IfStmt
										==
											fCurrentEntity
											fCurrentEntity
										BlockStmt
											offset
											fCurrentEntity
											newlines
											IfStmt
												load
													newlines
													BooleanLiteralExpr
												BlockStmt
													BreakStmt
									IfStmt
										==
											fCurrentEntity
											fCurrentEntity
											CharLiteralExpr
										BlockStmt
											++
												newlines
										BlockStmt
											++
												fCurrentEntity
											++
												offset
						<
							fCurrentEntity
							-
								fCurrentEntity
					ForStmt
						BlockStmt
							i
							fCurrentEntity
							CharLiteralExpr
						<
							i
							fCurrentEntity
						VariableDeclarator
							offset
							i
							PrimitiveType
						++
							i
					VariableDeclarator
						-
							fCurrentEntity
							offset
						length
						PrimitiveType
					IfStmt
						==
							fCurrentEntity
							-
								fCurrentEntity
						BlockStmt
							setValues
								fCurrentEntity
								offset
								length
								content
							ReturnStmt
								-
			WhileStmt
				BlockStmt
					c
					++
						fCurrentEntity
					fCurrentEntity
					IfStmt
						||
							||
								&&
									==
										c
										quote
									||
										!
											fCurrentEntity
										external
								==
									c
									CharLiteralExpr
							!
								isContent
									c
									XMLChar
						BlockStmt
							--
								fCurrentEntity
							BreakStmt
				<
					fCurrentEntity
					fCurrentEntity
			VariableDeclarator
				-
					fCurrentEntity
					offset
				length
				PrimitiveType
			fCurrentEntity
			-
				length
				newlines
			setValues
				fCurrentEntity
				offset
				length
				content
			IfStmt
				!=
					fCurrentEntity
					fCurrentEntity
				BlockStmt
					c
					-
				BlockStmt
					c
					fCurrentEntity
					fCurrentEntity
					IfStmt
						&&
							==
								c
								quote
							fCurrentEntity
						BlockStmt
							c
							-
			ReturnStmt
				c
		PrimitiveType
		PrimitiveType
	MethodDeclaration
		BlockStmt
			VariableDeclarator
				BooleanLiteralExpr
				done
				PrimitiveType
			VariableDeclarator
				length
					delimiter
				delimLen
				PrimitiveType
			VariableDeclarator
				charAt
					delimiter
				charAt0
				PrimitiveType
			VariableDeclarator
				isExternal
					fCurrentEntity
				external
				PrimitiveType
			DoStmt
				BlockStmt
					IfStmt
						==
							fCurrentEntity
							fCurrentEntity
						IfStmt
							>=
								fCurrentEntity
								-
									fCurrentEntity
									delimLen
							BlockStmt
								arraycopy
									fCurrentEntity
									fCurrentEntity
									fCurrentEntity
									-
										fCurrentEntity
										fCurrentEntity
									System
								load
									-
										fCurrentEntity
										fCurrentEntity
									BooleanLiteralExpr
								fCurrentEntity
						BlockStmt
							load
								BooleanLiteralExpr
					IfStmt
						>=
							fCurrentEntity
							-
								fCurrentEntity
								delimLen
						BlockStmt
							VariableDeclarator
								-
									fCurrentEntity
									fCurrentEntity
								length
								PrimitiveType
							append
								fCurrentEntity
								fCurrentEntity
								length
								buffer
							fCurrentEntity
							fCurrentEntity
							fCurrentEntity
							fCurrentEntity
							load
								BooleanLiteralExpr
							ReturnStmt
								BooleanLiteralExpr
					VariableDeclarator
						fCurrentEntity
						offset
						PrimitiveType
					VariableDeclarator
						offset
						fCurrentEntity
						c
						PrimitiveType
					VariableDeclarator
						newlines
						PrimitiveType
					IfStmt
						||
							==
								c
								CharLiteralExpr
							&&
								==
									c
									CharLiteralExpr
								external
						BlockStmt
							DoStmt
								BlockStmt
									c
									++
										fCurrentEntity
									fCurrentEntity
									IfStmt
										&&
											==
												c
												CharLiteralExpr
											external
										IfStmt
											==
												c
												CharLiteralExpr
											BlockStmt
												--
													fCurrentEntity
												BreakStmt
											BlockStmt
												++
													newlines
												++
													fCurrentEntity
												fCurrentEntity
												IfStmt
													==
														fCurrentEntity
														fCurrentEntity
													BlockStmt
														offset
														fCurrentEntity
														newlines
														fCurrentEntity
														newlines
														IfStmt
															load
																newlines
																BooleanLiteralExpr
															BlockStmt
																BreakStmt
										BlockStmt
											++
												newlines
											++
												fCurrentEntity
											fCurrentEntity
											IfStmt
												==
													fCurrentEntity
													fCurrentEntity
												BlockStmt
													offset
													fCurrentEntity
													newlines
													IfStmt
														load
															newlines
															BooleanLiteralExpr
														BlockStmt
															BreakStmt
											IfStmt
												==
													fCurrentEntity
													fCurrentEntity
													CharLiteralExpr
												BlockStmt
													++
														newlines
												BlockStmt
													++
														fCurrentEntity
													++
														offset
								<
									fCurrentEntity
									-
										fCurrentEntity
							ForStmt
								BlockStmt
									i
									fCurrentEntity
									CharLiteralExpr
								<
									i
									fCurrentEntity
								VariableDeclarator
									offset
									i
									PrimitiveType
								++
									i
							VariableDeclarator
								-
									fCurrentEntity
									offset
								length
								PrimitiveType
							IfStmt
								==
									fCurrentEntity
									-
										fCurrentEntity
								BlockStmt
									append
										fCurrentEntity
										offset
										length
										buffer
									ReturnStmt
										BooleanLiteralExpr
					WhileStmt
						BlockStmt
							c
							++
								fCurrentEntity
							fCurrentEntity
							IfStmt
								==
									c
									charAt0
								IfStmt
									||
										==
											c
											CharLiteralExpr
										&&
											external
											==
												c
												CharLiteralExpr
									IfStmt
										isInvalid
											c
											XMLChar
										BlockStmt
											--
												fCurrentEntity
											VariableDeclarator
												-
													fCurrentEntity
													offset
												length
												PrimitiveType
											fCurrentEntity
											-
												length
												newlines
											append
												fCurrentEntity
												offset
												length
												buffer
											ReturnStmt
												BooleanLiteralExpr
									BlockStmt
										--
											fCurrentEntity
										BreakStmt
								BlockStmt
									VariableDeclarator
										-
											fCurrentEntity
										delimOffset
										PrimitiveType
									ForStmt
										BlockStmt
											IfStmt
												==
													fCurrentEntity
													fCurrentEntity
												BlockStmt
													fCurrentEntity
													i
													BreakStmt
											c
											++
												fCurrentEntity
											fCurrentEntity
											IfStmt
												!=
													charAt
														i
														delimiter
													c
												BlockStmt
													--
														fCurrentEntity
													BreakStmt
										<
											i
											delimLen
										VariableDeclarator
											i
											PrimitiveType
										++
											i
									IfStmt
										==
											fCurrentEntity
											+
												delimOffset
												delimLen
										BlockStmt
											done
											BooleanLiteralExpr
											BreakStmt
						<
							fCurrentEntity
							fCurrentEntity
					VariableDeclarator
						-
							fCurrentEntity
							offset
						length
						PrimitiveType
					fCurrentEntity
					-
						length
						newlines
					IfStmt
						done
						BlockStmt
							length
							delimLen
					append
						fCurrentEntity
						offset
						length
						buffer
				!
					done
			ReturnStmt
				!
					done
		PrimitiveType
	MethodDeclaration
		BlockStmt
			IfStmt
				==
					fCurrentEntity
					fCurrentEntity
				BlockStmt
					load
						BooleanLiteralExpr
			VariableDeclarator
				fCurrentEntity
				fCurrentEntity
				cc
				PrimitiveType
			IfStmt
				==
					cc
					c
				IfStmt
					&&
						&&
							==
								c
								CharLiteralExpr
							==
								cc
								CharLiteralExpr
						isExternal
							fCurrentEntity
					BlockStmt
						IfStmt
							==
								fCurrentEntity
								fCurrentEntity
							BlockStmt
								fCurrentEntity
								cc
								PrimitiveType
								load
									BooleanLiteralExpr
						++
							fCurrentEntity
						IfStmt
							==
								fCurrentEntity
								fCurrentEntity
								CharLiteralExpr
							BlockStmt
								++
									fCurrentEntity
						++
							fCurrentEntity
						fCurrentEntity
						ReturnStmt
							BooleanLiteralExpr
				BlockStmt
					++
						fCurrentEntity
					IfStmt
						==
							c
							CharLiteralExpr
						BlockStmt
							++
								fCurrentEntity
						BlockStmt
							++
								fCurrentEntity
							fCurrentEntity
					ReturnStmt
						BooleanLiteralExpr
			ReturnStmt
				BooleanLiteralExpr
		PrimitiveType
		PrimitiveType
	MethodDeclaration
		BlockStmt
			IfStmt
				==
					fCurrentEntity
					fCurrentEntity
				BlockStmt
					load
						BooleanLiteralExpr
			VariableDeclarator
				fCurrentEntity
				fCurrentEntity
				c
				PrimitiveType
			IfStmt
				isSpace
					c
					XMLChar
				BlockStmt
					VariableDeclarator
						isExternal
							fCurrentEntity
						external
						PrimitiveType
					DoStmt
						BlockStmt
							VariableDeclarator
								BooleanLiteralExpr
								entityChanged
								PrimitiveType
							IfStmt
								||
									==
										c
										CharLiteralExpr
									&&
										external
										==
											c
											CharLiteralExpr
								BlockStmt
									++
										fCurrentEntity
								BlockStmt
									++
										fCurrentEntity
									fCurrentEntity
									IfStmt
										==
											fCurrentEntity
											-
												fCurrentEntity
										BlockStmt
											fCurrentEntity
											c
											PrimitiveType
											entityChanged
											load
												BooleanLiteralExpr
											IfStmt
												!
													entityChanged
												fCurrentEntity
									IfStmt
										&&
											==
												c
												CharLiteralExpr
											external
										BlockStmt
											IfStmt
												!=
													++
														fCurrentEntity
													fCurrentEntity
													CharLiteralExpr
												BlockStmt
													--
														fCurrentEntity
							IfStmt
								!
									entityChanged
								++
									fCurrentEntity
							IfStmt
								==
									fCurrentEntity
									fCurrentEntity
								BlockStmt
									load
										BooleanLiteralExpr
						isSpace
							c
							fCurrentEntity
							fCurrentEntity
							XMLChar
					ReturnStmt
						BooleanLiteralExpr
			ReturnStmt
				BooleanLiteralExpr
		PrimitiveType
	MethodDeclaration
		BlockStmt
			IfStmt
				==
					fCurrentEntity
					fCurrentEntity
				BlockStmt
					load
						BooleanLiteralExpr
			VariableDeclarator
				length
					s
				length
				PrimitiveType
			ForStmt
				BlockStmt
					VariableDeclarator
						++
							fCurrentEntity
						fCurrentEntity
						c
						PrimitiveType
					IfStmt
						!=
							c
							charAt
								i
								s
						BlockStmt
							fCurrentEntity
							+
								i
							ReturnStmt
								BooleanLiteralExpr
					IfStmt
						&&
							<
								i
								-
									length
							==
								fCurrentEntity
								fCurrentEntity
						BlockStmt
							arraycopy
								fCurrentEntity
								-
									-
										fCurrentEntity
										i
								fCurrentEntity
								+
									i
								System
							IfStmt
								load
									+
										i
									BooleanLiteralExpr
								BlockStmt
									fCurrentEntity
									+
										i
									ReturnStmt
										BooleanLiteralExpr
				<
					i
					length
				VariableDeclarator
					i
					PrimitiveType
				++
					i
			fCurrentEntity
			length
			ReturnStmt
				BooleanLiteralExpr
		PrimitiveType
	MethodDeclaration
		BlockStmt
			VariableDeclarator
				fCurrentEntity
				DEFAULT_XMLDECL_BUFFER_SIZE
				-
					fCurrentEntity
					offset
				length
				PrimitiveType
			VariableDeclarator
				read
					fCurrentEntity
					offset
					length
					fCurrentEntity
				count
				PrimitiveType
			VariableDeclarator
				BooleanLiteralExpr
				entityChanged
				PrimitiveType
			IfStmt
				!=
					count
					-
				BlockStmt
					fCurrentEntity
					offset
					fCurrentEntity
					offset
					entityChanged
					BooleanLiteralExpr
					IfStmt
						changeEntity
						BlockStmt
							endEntity
							IfStmt
								==
									fCurrentEntity
									NullLiteralExpr
								BlockStmt
									ThrowStmt
							IfStmt
								==
									fCurrentEntity
									fCurrentEntity
								BlockStmt
									load
										BooleanLiteralExpr
				BlockStmt
					IfStmt
						!=
							count
						BlockStmt
							fCurrentEntity
							+
								count
								offset
							fCurrentEntity
							offset
			ReturnStmt
				entityChanged
		PrimitiveType
		PrimitiveType
		PrimitiveType
	ClassOrInterfaceDeclaration
		FieldDeclaration
			VariableDeclarator
				fInputStream
		FieldDeclaration
			VariableDeclarator
				fData
				PrimitiveType
		FieldDeclaration
			VariableDeclarator
				fStartOffset
				PrimitiveType
		FieldDeclaration
			VariableDeclarator
				fEndOffset
				PrimitiveType
		FieldDeclaration
			VariableDeclarator
				fOffset
				PrimitiveType
		FieldDeclaration
			VariableDeclarator
				fLength
				PrimitiveType
		FieldDeclaration
			VariableDeclarator
				fMark
				PrimitiveType
		ConstructorDeclaration
			BlockStmt
				fData
				PrimitiveType
				DEFAULT_XMLDECL_BUFFER_SIZE
				fInputStream
				is
				fStartOffset
				fEndOffset
				-
				fOffset
				fLength
				fMark
		MethodDeclaration
			BlockStmt
				fStartOffset
				offset
			PrimitiveType
		MethodDeclaration
			BlockStmt
				fOffset
				fStartOffset
		MethodDeclaration
			BlockStmt
				VariableDeclarator
					b
					PrimitiveType
				IfStmt
					<
						fOffset
						fLength
					BlockStmt
						ReturnStmt
							&
								++
									fOffset
								fData
				IfStmt
					==
						fOffset
						fEndOffset
					BlockStmt
						ReturnStmt
							-
				IfStmt
					==
						fOffset
						fData
					BlockStmt
						VariableDeclarator
							PrimitiveType
							<<
								fOffset
							newData
							PrimitiveType
						arraycopy
							fData
							newData
							fOffset
							System
						fData
						newData
				b
				read
					fInputStream
				IfStmt
					==
						b
						-
					BlockStmt
						fEndOffset
						fOffset
						ReturnStmt
							-
				++
					fLength
				fData
				b
				PrimitiveType
				++
					fOffset
				ReturnStmt
					&
						b
			PrimitiveType
		MethodDeclaration
			BlockStmt
				VariableDeclarator
					-
						fLength
						fOffset
					bytesLeft
					PrimitiveType
				IfStmt
					==
						bytesLeft
					BlockStmt
						IfStmt
							==
								fOffset
								fEndOffset
							BlockStmt
								ReturnStmt
									-
						IfStmt
							fCurrentEntity
							BlockStmt
								ReturnStmt
									read
										b
										off
										len
										fInputStream
						VariableDeclarator
							read
							returnedVal
							PrimitiveType
						IfStmt
							==
								returnedVal
								-
							BlockStmt
								fEndOffset
								fOffset
								ReturnStmt
									-
						off
						b
						returnedVal
						PrimitiveType
						ReturnStmt
				IfStmt
					<
						len
						bytesLeft
					BlockStmt
						len
						bytesLeft
					BlockStmt
						IfStmt
							<=
								len
							BlockStmt
								ReturnStmt
				IfStmt
					!=
						b
						NullLiteralExpr
					BlockStmt
						arraycopy
							fData
							fOffset
							b
							off
							len
							System
				fOffset
				len
				ReturnStmt
					len
			PrimitiveType
			PrimitiveType
			PrimitiveType
			PrimitiveType
		MethodDeclaration
			BlockStmt
				VariableDeclarator
					bytesLeft
					PrimitiveType
				IfStmt
					<=
						n
					BlockStmt
						ReturnStmt
				bytesLeft
				-
					fLength
					fOffset
				IfStmt
					==
						bytesLeft
					BlockStmt
						IfStmt
							==
								fOffset
								fEndOffset
							BlockStmt
								ReturnStmt
						ReturnStmt
							skip
								n
								fInputStream
				IfStmt
					<=
						n
						bytesLeft
					BlockStmt
						fOffset
						n
						ReturnStmt
							n
				fOffset
				bytesLeft
				IfStmt
					==
						fOffset
						fEndOffset
					BlockStmt
						ReturnStmt
							bytesLeft
				n
				bytesLeft
				ReturnStmt
					+
						skip
							n
							fInputStream
						bytesLeft
			PrimitiveType
			PrimitiveType
		MethodDeclaration
			BlockStmt
				VariableDeclarator
					-
						fLength
						fOffset
					bytesLeft
					PrimitiveType
				IfStmt
					==
						bytesLeft
					BlockStmt
						IfStmt
							==
								fOffset
								fEndOffset
							BlockStmt
								ReturnStmt
									-
						ReturnStmt
							fCurrentEntity
							available
								fInputStream
				ReturnStmt
					bytesLeft
			PrimitiveType
		MethodDeclaration
			BlockStmt
				fMark
				fOffset
			PrimitiveType
		MethodDeclaration
			BlockStmt
				fOffset
				fMark
		MethodDeclaration
			BlockStmt
				ReturnStmt
					BooleanLiteralExpr
			PrimitiveType
		MethodDeclaration
			BlockStmt
				IfStmt
					!=
						fInputStream
						NullLiteralExpr
					BlockStmt
						close
							fInputStream
						fInputStream
						NullLiteralExpr
	MethodDeclaration
		BlockStmt
			IfStmt
				skipString
					StringLiteralExpr
				BlockStmt
					++
						fMarkupDepth
					IfStmt
						isName
							peekChar
							XMLChar
						BlockStmt
							scanXMLDeclOrTextDecl
								BooleanLiteralExpr
						BlockStmt
							clear
								fStringBuffer
							append
								StringLiteralExpr
								fStringBuffer
							WhileStmt
								BlockStmt
									append
										scanChar
										PrimitiveType
										fStringBuffer
								isName
									peekChar
									XMLChar
							VariableDeclarator
								addSymbol
									fStringBuffer
									fStringBuffer
									fStringBuffer
									fSymbolTable
								target
							scanPIData
								target
								fString
	MethodDeclaration
		BlockStmt
			scanXMLDeclOrTextDecl
				scanningTextDecl
				fStrings
			--
				fMarkupDepth
			VariableDeclarator
				fStrings
				encodingPseudoAttr
			IfStmt
				!=
					encodingPseudoAttr
					NullLiteralExpr
				BlockStmt
					isEncodingSetInProlog
					BooleanLiteralExpr
					encoding
					encodingPseudoAttr
		PrimitiveType
	MethodDeclaration
		BlockStmt
			VariableDeclarator
				NullLiteralExpr
				version
			VariableDeclarator
				NullLiteralExpr
				encoding
			VariableDeclarator
				NullLiteralExpr
				standalone
			VariableDeclarator
				STATE_VERSION
				PrimitiveType
			VariableDeclarator
				STATE_ENCODING
				PrimitiveType
			VariableDeclarator
				STATE_STANDALONE
				PrimitiveType
			VariableDeclarator
				STATE_DONE
				PrimitiveType
			VariableDeclarator
				STATE_VERSION
				state
				PrimitiveType
			VariableDeclarator
				BooleanLiteralExpr
				dataFoundForTarget
				PrimitiveType
			VariableDeclarator
				skipSpaces
				sawSpace
				PrimitiveType
			WhileStmt
				BlockStmt
					dataFoundForTarget
					BooleanLiteralExpr
					VariableDeclarator
						scanPseudoAttribute
							scanningTextDecl
							fString
						name
					SwitchStmt
						SwitchEntryStmt
							STATE_VERSION
							BlockStmt
								IfStmt
									==
										name
										fVersionSymbol
									IfStmt
										==
											name
											fEncodingSymbol
										BlockStmt
											IfStmt
												scanningTextDecl
												BlockStmt
													jspError
														StringLiteralExpr
														err
												BlockStmt
													jspError
														StringLiteralExpr
														err
										BlockStmt
											IfStmt
												!
													scanningTextDecl
												BlockStmt
													jspError
														StringLiteralExpr
														err
											IfStmt
												!
													sawSpace
												BlockStmt
													reportFatalError
														scanningTextDecl
														StringLiteralExpr
														StringLiteralExpr
														NullLiteralExpr
											encoding
											toString
												fString
											state
											scanningTextDecl
											STATE_STANDALONE
											STATE_DONE
									BlockStmt
										IfStmt
											!
												sawSpace
											BlockStmt
												reportFatalError
													scanningTextDecl
													StringLiteralExpr
													StringLiteralExpr
													NullLiteralExpr
										version
										toString
											fString
										state
										STATE_ENCODING
										IfStmt
											!
												equals
													StringLiteralExpr
													version
											BlockStmt
												jspError
													StringLiteralExpr
													version
													err
								BreakStmt
						SwitchEntryStmt
							STATE_ENCODING
							BlockStmt
								IfStmt
									==
										name
										fEncodingSymbol
									IfStmt
										&&
											!
												scanningTextDecl
											==
												name
												fStandaloneSymbol
										BlockStmt
											jspError
												StringLiteralExpr
												err
										BlockStmt
											IfStmt
												!
													sawSpace
												BlockStmt
													jspError
														StringLiteralExpr
														err
											standalone
											toString
												fString
											state
											STATE_DONE
											IfStmt
												&&
													!
														equals
															StringLiteralExpr
															standalone
													!
														equals
															StringLiteralExpr
															standalone
												BlockStmt
													jspError
														StringLiteralExpr
														err
									BlockStmt
										IfStmt
											!
												sawSpace
											BlockStmt
												reportFatalError
													scanningTextDecl
													StringLiteralExpr
													StringLiteralExpr
													NullLiteralExpr
										encoding
										toString
											fString
										state
										scanningTextDecl
										STATE_STANDALONE
										STATE_DONE
								BreakStmt
						SwitchEntryStmt
							STATE_STANDALONE
							BlockStmt
								IfStmt
									==
										name
										fStandaloneSymbol
									BlockStmt
										jspError
											StringLiteralExpr
											err
									BlockStmt
										IfStmt
											!
												sawSpace
											BlockStmt
												jspError
													StringLiteralExpr
													err
										standalone
										toString
											fString
										state
										STATE_DONE
										IfStmt
											&&
												!
													equals
														StringLiteralExpr
														standalone
												!
													equals
														StringLiteralExpr
														standalone
											BlockStmt
												jspError
													StringLiteralExpr
													err
								BreakStmt
						SwitchEntryStmt
							BlockStmt
								jspError
									StringLiteralExpr
									err
						state
					sawSpace
					skipSpaces
				!=
					peekChar
					CharLiteralExpr
			IfStmt
				&&
					scanningTextDecl
					!=
						state
						STATE_DONE
				BlockStmt
					jspError
						StringLiteralExpr
						err
			IfStmt
				scanningTextDecl
				BlockStmt
					IfStmt
						&&
							!
								dataFoundForTarget
							==
								version
								NullLiteralExpr
						BlockStmt
							jspError
								StringLiteralExpr
								err
				BlockStmt
					IfStmt
						&&
							!
								dataFoundForTarget
							==
								encoding
								NullLiteralExpr
						BlockStmt
							jspError
								StringLiteralExpr
								err
			IfStmt
				!
					skipChar
						CharLiteralExpr
				BlockStmt
					jspError
						StringLiteralExpr
						err
			IfStmt
				!
					skipChar
						CharLiteralExpr
				BlockStmt
					jspError
						StringLiteralExpr
						err
			pseudoAttributeValues
			version
			pseudoAttributeValues
			encoding
			pseudoAttributeValues
			standalone
		PrimitiveType
	MethodDeclaration
		BlockStmt
			VariableDeclarator
				scanName
				name
			IfStmt
				==
					name
					NullLiteralExpr
				BlockStmt
					jspError
						StringLiteralExpr
						err
			skipSpaces
			IfStmt
				!
					skipChar
						CharLiteralExpr
				BlockStmt
					reportFatalError
						scanningTextDecl
						StringLiteralExpr
						StringLiteralExpr
						name
			skipSpaces
			VariableDeclarator
				peekChar
				quote
				PrimitiveType
			IfStmt
				&&
					!=
						quote
						CharLiteralExpr
					!=
						quote
						CharLiteralExpr
				BlockStmt
					reportFatalError
						scanningTextDecl
						StringLiteralExpr
						StringLiteralExpr
						name
			scanChar
			VariableDeclarator
				scanLiteral
					quote
					value
				c
				PrimitiveType
			IfStmt
				!=
					c
					quote
				BlockStmt
					clear
						fStringBuffer2
					DoStmt
						BlockStmt
							append
								value
								fStringBuffer2
							IfStmt
								!=
									c
									-
								BlockStmt
									IfStmt
										||
											||
												||
													==
														c
														CharLiteralExpr
													==
														c
														CharLiteralExpr
												==
													c
													CharLiteralExpr
											==
												c
												CharLiteralExpr
										IfStmt
											isHighSurrogate
												c
												XMLChar
											IfStmt
												isInvalid
													c
													XMLChar
												BlockStmt
													VariableDeclarator
														scanningTextDecl
														StringLiteralExpr
														StringLiteralExpr
														key
													reportFatalError
														key
														toString
															c
															Integer
													scanChar
											BlockStmt
												scanSurrogates
													fStringBuffer2
										BlockStmt
											append
												scanChar
												PrimitiveType
												fStringBuffer2
							c
							scanLiteral
								quote
								value
						!=
							c
							quote
					append
						value
						fStringBuffer2
					setValues
						fStringBuffer2
						value
			IfStmt
				!
					skipChar
						quote
				BlockStmt
					reportFatalError
						scanningTextDecl
						StringLiteralExpr
						StringLiteralExpr
						name
			ReturnStmt
				name
		PrimitiveType
	MethodDeclaration
		BlockStmt
			IfStmt
				==
					length
						target
				BlockStmt
					VariableDeclarator
						toLowerCase
							charAt
								target
							Character
						c0
						PrimitiveType
					VariableDeclarator
						toLowerCase
							charAt
								target
							Character
						c1
						PrimitiveType
					VariableDeclarator
						toLowerCase
							charAt
								target
							Character
						c2
						PrimitiveType
					IfStmt
						&&
							&&
								==
									c0
									CharLiteralExpr
								==
									c1
									CharLiteralExpr
							==
								c2
								CharLiteralExpr
						BlockStmt
							jspError
								StringLiteralExpr
								err
			IfStmt
				!
					skipSpaces
				BlockStmt
					IfStmt
						skipString
							StringLiteralExpr
						BlockStmt
							jspError
								StringLiteralExpr
								err
						BlockStmt
							clear
								data
							ReturnStmt
			clear
				fStringBuffer
			IfStmt
				scanData
					StringLiteralExpr
					fStringBuffer
				BlockStmt
					DoStmt
						BlockStmt
							VariableDeclarator
								peekChar
								c
								PrimitiveType
							IfStmt
								!=
									c
									-
								BlockStmt
									IfStmt
										isHighSurrogate
											c
											XMLChar
										IfStmt
											isInvalid
												c
												XMLChar
											BlockStmt
												jspError
													StringLiteralExpr
													toHexString
														c
														Integer
													err
												scanChar
										BlockStmt
											scanSurrogates
												fStringBuffer
						scanData
							StringLiteralExpr
							fStringBuffer
			setValues
				fStringBuffer
				data
	MethodDeclaration
		BlockStmt
			VariableDeclarator
				scanChar
				high
				PrimitiveType
			VariableDeclarator
				peekChar
				low
				PrimitiveType
			IfStmt
				!
					isLowSurrogate
						low
						XMLChar
				BlockStmt
					jspError
						StringLiteralExpr
						toString
							high
							Integer
						err
					ReturnStmt
						BooleanLiteralExpr
			scanChar
			VariableDeclarator
				supplemental
					high
					PrimitiveType
					low
					PrimitiveType
					XMLChar
				c
				PrimitiveType
			IfStmt
				!
					isValid
						c
						XMLChar
				BlockStmt
					jspError
						StringLiteralExpr
						toString
							c
							Integer
						err
					ReturnStmt
						BooleanLiteralExpr
			append
				high
				PrimitiveType
				buf
			append
				low
				PrimitiveType
				buf
			ReturnStmt
				BooleanLiteralExpr
		PrimitiveType
	MethodDeclaration
		BlockStmt
			jspError
				msgId
				arg
				err
